/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cellsignal.cloudparameters.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-19T10:35:13.425641-04:00[America/New_York]")
@Validated
public interface ParameterApi {

    ParameterApiDelegate getDelegate();

    @Operation(summary = "Returns the value of the parameter with a given key", description = "Returns the value for a given parameter in the parameter store. Due to the use of a path in the parameter key value, the get method should use a URL Escaped query parameter. Should call  AWS SSM get-parameter API ", tags={ "developers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "String Value of Parameter", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "500", description = "internal error"),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/parameter/getValue",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getParameter(@NotNull @Parameter(in = ParameterIn.QUERY, description = "parameter key being queried" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "key", required = true) String key) {
        return getDelegate().getParameter(key);
    }

}

